{"name":"Testflight","tagline":"Painless http testing in Go","body":"# testflight\r\n\r\n[![Build Status](https://travis-ci.org/drewolson/testflight.png?branch=master)](https://travis-ci.org/drewolson/testflight)\r\n\r\n## Installation\r\n\r\n```bash\r\ngo get github.com/drewolson/testflight\r\n```\r\n\r\n```go\r\nimport \"github.com/drewolson/testflight\"\r\n```\r\n\r\n## Usage\r\n\r\ntestflight makes it simple to test your http servers in Go. Suppose you're using [pat](https://github.com/bmizerany/pat) to create a simple http handler, like so:\r\n\r\n```go\r\nfunc Handler() http.Handler {\r\n\tm := pat.New()\r\n\r\n\tm.Get(\"/hello/:name\", http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {\r\n\t\tio.WriteString(w, \"hello, \"+req.URL.Query().Get(\":name\"))\r\n\t}))\r\n\r\n\tm.Post(\"/post/form\", http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {\r\n\t\treq.ParseForm()\r\n\t\tname := req.Form.Get(\"name\")\r\n\t\tw.WriteHeader(201)\r\n\t\tio.WriteString(w, name+\" created\")\r\n\t}))\r\n\r\n\treturn m\r\n}\r\n```\r\n\r\nLet's use testflight to test our handler. Keep in mind that testflight is doing full-stack http tests. We're also using assert for test assertions.\r\n\r\n```go\r\nfunc TestGet(t *testing.T) {\r\n\ttestflight.WithServer(Handler(), func(r *testflight.Requester) {\r\n\t\tresponse := r.Get(\"/hello/drew\")\r\n\r\n\t\tassert.Equal(t, 200, response.StatusCode)\r\n\t\tassert.Equal(t, \"hello, drew\", response.Body)\r\n\t})\r\n}\r\n\r\nfunc TestPostWithForm(t *testing.T) {\r\n\ttestflight.WithServer(Handler(), func(r *testflight.Requester) {\r\n\t\tresponse := r.Post(\"/post/form\", testflight.FORM_ENCODED, \"name=Drew\")\r\n\r\n\t\tassert.Equal(t, 201, response.StatusCode)\r\n\t\tassert.Equal(t, \"Drew created\", response.Body)\r\n\t})\r\n}\r\n```\r\n\r\nThe testflight.Requester class has the following methods: Get, Post, Put, Delete and Do. Do accepts an *http.Request for times when you need more explicit control of our request. See testflight_test.go for more usage information.\r\n\r\n## Testing Websockets\r\n\r\nTestflight also allows you to perform full-stack testing of websockets. You'll want to import both the testflight and testflight/ws packages.\r\n\r\n```go\r\nimport (\r\n    \"github.com/drewolson/testflight\"\r\n    \"github.com/drewolson/testflight/ws\"\r\n)\r\n```\r\n\r\nNow, let's make a handler with a websocket route.\r\n\r\n```go\r\nfunc Handler() http.Handler {\r\n\tmux := http.NewServeMux()\r\n\r\n\tmux.Handle(\"/websocket\", websocket.Handler(func(ws *websocket.Conn) {\r\n\t\tvar name string\r\n\t\twebsocket.Message.Receive(ws, &name)\r\n\t\twebsocket.Message.Send(ws, \"Hello, \"+name)\r\n\t}))\r\n\r\n\treturn mux\r\n}\r\n```\r\n\r\nFinally, let's write the test.\r\n\r\n```go\r\nfunc TestWebSocket(t *testing.T) {\r\n    testflight.WithServer(Handler(), func(r *testflight.Requester) {\r\n        connection := ws.Connect(r, \"/websocket\")\r\n\r\n        connection.SendMessage(\"Drew\")\r\n        message, _ := connection.ReceiveMessage()\r\n        assert.Equal(t, \"Hello, Drew\", message)\r\n    })\r\n}\r\n```\r\n\r\n## Contributing\r\n\r\nFirst, run the tests.\r\n\r\n```bash\r\ngit clone git@github.com:drewolson/testflight.git $GOPATH/src/github.com/drewolson/testflight\r\ncd $GOPATH/src/github.com/drewolson/testflight\r\n\r\nmake test\r\n```\r\n\r\nNow write new tests, fix them and send me a pull request!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}